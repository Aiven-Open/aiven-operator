<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aiven Operator â€“ Kafka</title><link>https://aiven.github.io/aiven-operator/docs/resources/kafka/</link><description>Recent content in Kafka on Aiven Operator</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://aiven.github.io/aiven-operator/docs/resources/kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Kafka Schema</title><link>https://aiven.github.io/aiven-operator/docs/resources/kafka/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aiven.github.io/aiven-operator/docs/resources/kafka/schema/</guid><description>
&lt;h2 id="creating-a-kafkaschema">Creating a &lt;code>KafkaSchema&lt;/code>&lt;/h2>
&lt;p>Aiven develops and maintain &lt;a href="https://github.com/aiven/karapace">Karapace&lt;/a>, an open source implementation of Kafka REST
and schema registry. Is available out of the box for our managed Kafka service.&lt;/p>
&lt;blockquote>
&lt;p>The schema registry address and authentication is the same as the Kafka broker, the only different is the usage of the port 13044.&lt;/p>
&lt;/blockquote>
&lt;p>First, let&amp;rsquo;s create an Aiven for Apache Kafka service.&lt;/p>
&lt;ol>
&lt;li>Create a file named &lt;code>kafka-sample-schema.yaml&lt;/code> and add the content below:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Kafka&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-schema&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#f92672">connInfoSecretTarget&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#f92672">cloudName&lt;/span>: &lt;span style="color:#ae81ff">google-europe-west1&lt;/span>
&lt;span style="color:#f92672">plan&lt;/span>: &lt;span style="color:#ae81ff">startup-2&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowDow&lt;/span>: &lt;span style="color:#ae81ff">friday&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowTime&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>
&lt;span style="color:#f92672">userConfig&lt;/span>:
&lt;span style="color:#f92672">kafka_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;2.7&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># this flag enables the Schema registry&lt;/span>
&lt;span style="color:#f92672">schema_registry&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Apply the changes with the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f kafka-schema.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s create the schema itself.&lt;/p>
&lt;ol>
&lt;li>Create a new file named &lt;code>kafka-sample-schema.yaml&lt;/code> and add the YAML content below:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">KafkaSchema&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-schema&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-schema&lt;/span>
&lt;span style="color:#75715e"># the name of the Schema&lt;/span>
&lt;span style="color:#f92672">subjectName&lt;/span>: &lt;span style="color:#ae81ff">MySchema&lt;/span>
&lt;span style="color:#75715e"># the schema itself, in JSON format&lt;/span>
&lt;span style="color:#f92672">schema&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;type&amp;#34;: &amp;#34;record&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;name&amp;#34;: &amp;#34;MySchema&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;fields&amp;#34;: [
&lt;/span>&lt;span style="color:#e6db74"> {
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;name&amp;#34;: &amp;#34;field&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;span style="color:#e6db74"> ]
&lt;/span>&lt;span style="color:#e6db74"> }&lt;/span>
&lt;span style="color:#75715e"># sets the schema compatibility level &lt;/span>
&lt;span style="color:#f92672">compatibilityLevel&lt;/span>: &lt;span style="color:#ae81ff">BACKWARD&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Create the schema with the command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f kafka-schema.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Review the resource you created with the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get kafkaschemas.aiven.io kafka-schema
NAME SERVICE NAME PROJECT SUBJECT COMPATIBILITY LEVEL VERSION
kafka-schema kafka-sample &amp;lt;your-project&amp;gt; MySchema BACKWARD &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can follow &lt;a href="https://help.aiven.io/en/articles/2302613-using-schema-registry-with-aiven-for-apache-kafka">our official documentation&lt;/a>
on how to use the schema created.&lt;/p></description></item><item><title>Docs: Kafka Connect</title><link>https://aiven.github.io/aiven-operator/docs/resources/kafka/connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aiven.github.io/aiven-operator/docs/resources/kafka/connect/</guid><description>
&lt;p>&lt;a href="https://aiven.io/kafka-connect">Aiven for Apache Kafka Connect&lt;/a> is a framework and a runtime for integrating Kafka with other systems. Kafka connectors can either be a source (for pulling data from other systems into Kafka) or sink (for pushing data into other systems from Kafka).&lt;/p>
&lt;p>This section involves a few different Kubernetes CRDs:&lt;/p>
&lt;ol>
&lt;li>A &lt;code>KafkaService&lt;/code> service with a &lt;code>KafkaTopic&lt;/code>&lt;/li>
&lt;li>A &lt;code>KafkaConnect&lt;/code> service&lt;/li>
&lt;li>A &lt;code>ServiceIntegration&lt;/code> to integrate the &lt;code>Kafka&lt;/code> and &lt;code>KafkaConnect&lt;/code> services&lt;/li>
&lt;li>A &lt;code>PostgreSQL&lt;/code> used as a sink to receive messages from &lt;code>Kafka&lt;/code>&lt;/li>
&lt;li>A &lt;code>KafkaConnector&lt;/code> to finally connect the &lt;code>Kafka&lt;/code> with the &lt;code>PostgreSQL&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="creating-the-resources">Creating the resources&lt;/h2>
&lt;p>Create a file named &lt;code>kafka-sample-connect.yaml&lt;/code> with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Kafka&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#75715e"># gets the authentication token from the `aiven-token` Secret&lt;/span>
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#75715e"># outputs the Kafka connection on the `kafka-connection` Secret&lt;/span>
&lt;span style="color:#f92672">connInfoSecretTarget&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;span style="color:#75715e"># add your Project name here&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#75715e"># cloud provider and plan of your choice&lt;/span>
&lt;span style="color:#75715e"># you can check all of the possibilities here https://aiven.io/pricing&lt;/span>
&lt;span style="color:#f92672">cloudName&lt;/span>: &lt;span style="color:#ae81ff">google-europe-west1&lt;/span>
&lt;span style="color:#f92672">plan&lt;/span>: &lt;span style="color:#ae81ff">business-4&lt;/span>
&lt;span style="color:#75715e"># general Aiven configuration&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowDow&lt;/span>: &lt;span style="color:#ae81ff">friday&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowTime&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>
&lt;span style="color:#75715e"># specific Kafka configuration&lt;/span>
&lt;span style="color:#f92672">userConfig&lt;/span>:
&lt;span style="color:#f92672">kafka_version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;2.7&amp;#39;&lt;/span>
&lt;span style="color:#f92672">kafka_connect&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
---
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">KafkaTopic&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-topic-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-connect&lt;/span>
&lt;span style="color:#f92672">replication&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">partitions&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, create a file named &lt;code>kafka-connect.yaml&lt;/code> and add the following &lt;code>KafkaConnect&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">KafkaConnect&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#75715e"># gets the authentication token from the `aiven-token` Secret&lt;/span>
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#75715e"># add your Project name here&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#75715e"># cloud provider and plan of your choice&lt;/span>
&lt;span style="color:#75715e"># you can check all of the possibilities here https://aiven.io/pricing&lt;/span>
&lt;span style="color:#f92672">cloudName&lt;/span>: &lt;span style="color:#ae81ff">google-europe-west1&lt;/span>
&lt;span style="color:#f92672">plan&lt;/span>: &lt;span style="color:#ae81ff">startup-4&lt;/span>
&lt;span style="color:#75715e"># general Aiven configuration&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowDow&lt;/span>: &lt;span style="color:#ae81ff">friday&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowTime&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s create a &lt;code>ServiceIntegration&lt;/code>. It will use the fields &lt;code>sourceServiceName&lt;/code> and &lt;code>destinationServiceName&lt;/code> to integrate the previously created &lt;code>kafka-sample-connect&lt;/code> and &lt;code>kafka-connect&lt;/code>. Open a new file named &lt;code>service-integration-connect.yaml&lt;/code> and add the content below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServiceIntegration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">service-integration-kafka-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#75715e"># gets the authentication token from the `aiven-token` Secret&lt;/span>
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#75715e"># indicates the type of the integration&lt;/span>
&lt;span style="color:#f92672">integrationType&lt;/span>: &lt;span style="color:#ae81ff">kafka_connect&lt;/span>
&lt;span style="color:#75715e"># we will send messages from the `kafka-sample-connect` to `kafka-connect`&lt;/span>
&lt;span style="color:#f92672">sourceServiceName&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-connect&lt;/span>
&lt;span style="color:#f92672">destinationServiceName&lt;/span>: &lt;span style="color:#ae81ff">kafka-connect&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s add an Aiven for PostgreSQL service. It will be the service used as a &lt;em>sink&lt;/em>, receiving messages from the &lt;code>kafka-sample-connect&lt;/code> cluster. Create a file named &lt;code>pg-sample-connect.yaml&lt;/code> with the content below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PostgreSQL&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pg-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#75715e"># gets the authentication token from the `aiven-token` Secret&lt;/span>
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#75715e"># outputs the PostgreSQL connection on the `pg-connection` Secret&lt;/span>
&lt;span style="color:#f92672">connInfoSecretTarget&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pg-connection&lt;/span>
&lt;span style="color:#75715e"># add your Project name here&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#75715e"># cloud provider and plan of your choice&lt;/span>
&lt;span style="color:#75715e"># you can check all of the possibilities here https://aiven.io/pricing&lt;/span>
&lt;span style="color:#f92672">cloudName&lt;/span>: &lt;span style="color:#ae81ff">google-europe-west1&lt;/span>
&lt;span style="color:#f92672">plan&lt;/span>: &lt;span style="color:#ae81ff">startup-4&lt;/span>
&lt;span style="color:#75715e"># general Aiven configuration&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowDow&lt;/span>: &lt;span style="color:#ae81ff">friday&lt;/span>
&lt;span style="color:#f92672">maintenanceWindowTime&lt;/span>: &lt;span style="color:#ae81ff">23&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>:&lt;span style="color:#ae81ff">00&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, let&amp;rsquo;s add the glue of everything: a &lt;code>KafkaConnector&lt;/code>. As described in the specification, it will send receive messages from the &lt;code>kafka-sample-connect&lt;/code> and send them to the &lt;code>pg-connect&lt;/code> service. Check our &lt;a href="https://help.aiven.io/en/articles/1231452-kafka-connect-connectors">official documentation&lt;/a> for more connectors.&lt;/p>
&lt;p>Create a file named &lt;code>kafka-connector-connect.yaml&lt;/code> and with the content below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">aiven.io/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">KafkaConnector&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-connector&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">authSecretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aiven-token&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">token&lt;/span>
&lt;span style="color:#ae81ff">â€‹&lt;/span>
&lt;span style="color:#f92672">project&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;your-project-name&amp;gt;&lt;/span>
&lt;span style="color:#ae81ff">â€‹&lt;/span>
&lt;span style="color:#75715e"># the Kafka cluster name&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">kafka-sample-connect&lt;/span>
&lt;span style="color:#ae81ff">â€‹&lt;/span>
&lt;span style="color:#75715e"># the connector we will be using&lt;/span>
&lt;span style="color:#f92672">connectorClass&lt;/span>: &lt;span style="color:#ae81ff">io.aiven.connect.jdbc.JdbcSinkConnector&lt;/span>
&lt;span style="color:#f92672">userConfig&lt;/span>:
&lt;span style="color:#f92672">auto.create&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># constructs the pg-connect connection information&lt;/span>
&lt;span style="color:#f92672">connection.url&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;jdbc:postgresql://{{ fromSecret &amp;#34;pg-connection&amp;#34; &amp;#34;PGHOST&amp;#34;}}:{{ fromSecret &amp;#34;pg-connection&amp;#34; &amp;#34;PGPORT&amp;#34; }}/{{ fromSecret &amp;#34;pg-connection&amp;#34; &amp;#34;PGDATABASE&amp;#34; }}&amp;#39;&lt;/span>
&lt;span style="color:#f92672">connection.user&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{{ fromSecret &amp;#34;pg-connection&amp;#34; &amp;#34;PGUSER&amp;#34; }}&amp;#39;&lt;/span>
&lt;span style="color:#f92672">connection.password&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{{ fromSecret &amp;#34;pg-connection&amp;#34; &amp;#34;PGPASSWORD&amp;#34; }}&amp;#39;&lt;/span>
&lt;span style="color:#75715e"># specify which topics it will watch&lt;/span>
&lt;span style="color:#f92672">topics&lt;/span>: &lt;span style="color:#ae81ff">kafka-topic-connect&lt;/span>
&lt;span style="color:#f92672">key.converter&lt;/span>: &lt;span style="color:#ae81ff">org.apache.kafka.connect.json.JsonConverter&lt;/span>
&lt;span style="color:#f92672">value.converter&lt;/span>: &lt;span style="color:#ae81ff">org.apache.kafka.connect.json.JsonConverter&lt;/span>
&lt;span style="color:#f92672">value.converter.schemas.enable&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With all the files create, let&amp;rsquo;s apply the new Kubernetes resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-sample-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f service-integration-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f pg-sample-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-connector-connect.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will take some time for all the services to be up and running. You can check all of them with the command below. The deployment is finished when all services have the state &lt;code>RUNNING&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> kafkas.aiven.io/kafka-sample-connect &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> kafkaconnects.aiven.io/kafka-connect &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> postgresqls.aiven.io/pg-connect &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> kafkaconnectors.aiven.io/kafka-connector
NAME PROJECT REGION PLAN STATE
kafka.aiven.io/kafka-sample-connect your-project google-europe-west1 business-4 RUNNING
NAME STATE
kafkaconnect.aiven.io/kafka-connect RUNNING
NAME PROJECT REGION PLAN STATE
postgresql.aiven.io/pg-connect your-project google-europe-west1 startup-4 RUNNING
NAME SERVICE NAME PROJECT CONNECTOR CLASS STATE TASKS TOTAL TASKS RUNNING
kafkaconnector.aiven.io/kafka-connector kafka-sample-connect your-project io.aiven.connect.jdbc.JdbcSinkConnector RUNNING &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>To test the connection integration, let&amp;rsquo;s produce a Kafka message using &lt;a href="https://github.com/edenhill/kcat">kcat&lt;/a> from within the Kubernetes cluster. We will deploy a Pod responsible for crafting a message and sending to the Kafka cluster, using the &lt;code>kafka-auth&lt;/code> secret generate by the &lt;code>Kafka&lt;/code> CRD.&lt;/p>
&lt;p>Create a new file named &lt;code>kcat-connect.yaml&lt;/code> and add the content below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-message&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
&lt;span style="color:#f92672">restartPolicy&lt;/span>: &lt;span style="color:#ae81ff">Never&lt;/span>
- &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">edenhill/kcat:1.7.0&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kcat&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;/bin/sh&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">args&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#39;-c&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;echo {\&amp;#34;schema\&amp;#34;:{\&amp;#34;type\&amp;#34;:\&amp;#34;struct\&amp;#34;,\&amp;#34;fields\&amp;#34;:[{ \&amp;#34;field\&amp;#34;: \&amp;#34;text\&amp;#34;, \&amp;#34;type\&amp;#34;: \&amp;#34;string\&amp;#34;, \&amp;#34;optional\&amp;#34;: false } ] }, \&amp;#34;payload\&amp;#34;: { \&amp;#34;text\&amp;#34;: \&amp;#34;Hello World\&amp;#34; } } &amp;gt; /tmp/msg;
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> kcat
&lt;/span>&lt;span style="color:#e6db74"> -b $(HOST):$(PORT)
&lt;/span>&lt;span style="color:#e6db74"> -X security.protocol=SSL
&lt;/span>&lt;span style="color:#e6db74"> -X ssl.key.location=/kafka-auth/ACCESS_KEY
&lt;/span>&lt;span style="color:#e6db74"> -X ssl.key.password=$(PASSWORD)
&lt;/span>&lt;span style="color:#e6db74"> -X ssl.certificate.location=/kafka-auth/ACCESS_CERT
&lt;/span>&lt;span style="color:#e6db74"> -X ssl.ca.location=/kafka-auth/CA_CERT
&lt;/span>&lt;span style="color:#e6db74"> -P -t kafka-topic-connect /tmp/msg&amp;#39;&lt;/span>
]
&lt;span style="color:#f92672">envFrom&lt;/span>:
- &lt;span style="color:#f92672">secretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;span style="color:#f92672">volumeMounts&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/kafka-auth&amp;#34;&lt;/span>
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;span style="color:#f92672">secret&lt;/span>:
&lt;span style="color:#f92672">secretName&lt;/span>: &lt;span style="color:#ae81ff">kafka-auth&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apply the file with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f kcat-connect.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Pod will execute the commands and finish. You can confirm its &lt;code>Completed&lt;/code> state with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod kafka-message
NAME READY STATUS RESTARTS AGE
kafka-message 0/1 Completed &lt;span style="color:#ae81ff">0&lt;/span> 5m35s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If everything went smoothly, we should have our produced message in the PostgreSQL service. Let&amp;rsquo;s check that out.&lt;/p>
&lt;p>Create a file named &lt;code>psql-connect.yaml&lt;/code> with the content below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">psql-connect&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">restartPolicy&lt;/span>: &lt;span style="color:#ae81ff">Never&lt;/span>
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">postgres:13&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">postgres&lt;/span>
&lt;span style="color:#75715e"># &amp;#34;kafka-topic-connect&amp;#34; is the table automatically created by KafkaConnect&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;psql&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;$(DATABASE_URI)&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-c&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;SELECT * from &amp;#34;kafka-topic-connect&amp;#34;;&amp;#39;&lt;/span>]
&lt;span style="color:#f92672">envFrom&lt;/span>:
- &lt;span style="color:#f92672">secretRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pg-connection&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apply the file with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f psql-connect.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After a couple of seconds, inspects its log with the command below. The output should be as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl logs psql-connect
text
-------------
Hello World
&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> row&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="clean-up">Clean up&lt;/h2>
&lt;p>To clean up all the created resources, use the command below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl delete &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-sample-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f service-integration-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f pg-sample-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kafka-connector-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f kcat-connect.yaml &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> -f psql-connect.yaml
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>